use std::collections::HashMap;

use ursa::cl::Proof as CryptoProof;

use super::schema::SchemaId;
use super::credential_definition::CredentialDefinitionId;
use super::revocation_registry_definition::RevocationRegistryId;
use indy_api_types::validation::Validatable;

#[derive(Debug, Serialize, Deserialize)]
pub struct Proof {
    pub proof: CryptoProof,
    pub requested_proof: RequestedProof,
    pub identifiers: Vec<Identifier>
}

#[derive(Debug, Serialize, Deserialize)]
pub struct RequestedProof {
    pub revealed_attrs: HashMap<String, RevealedAttributeInfo>,
    pub revealed_attr_groups: HashMap<String, RevealedAttributeGroupInfo>,
    pub self_attested_attrs: HashMap<String, String>,
    pub unrevealed_attrs: HashMap<String, SubProofReferent>,
    pub predicates: HashMap<String, SubProofReferent>
}

impl Default for RequestedProof {
    fn default() -> Self {
        RequestedProof {
            revealed_attrs: HashMap::new(),
            revealed_attr_groups: HashMap::new(),
            self_attested_attrs: HashMap::new(),
            unrevealed_attrs: HashMap::new(),
            predicates: HashMap::new(),
        }
    }
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct SubProofReferent {
    pub sub_proof_index: u32,
}

#[derive(Debug, Deserialize, Serialize)]
pub struct RevealedAttributeInfo {
    pub sub_proof_index: u32,
    pub raw: String,
    pub encoded: String
}

#[derive(Debug, Deserialize, Serialize)]
pub struct RevealedAttributeGroupInfo {
    pub sub_proof_index: u32,
    pub values: HashMap<String, AttributeValue>,
}

#[derive(Debug, Deserialize, Serialize)]
pub struct AttributeValue {
    pub raw: String,
    pub encoded: String
}

#[derive(Debug, Clone, Deserialize, Serialize, PartialEq, Eq, Hash)]
pub struct Identifier {
    pub schema_id: SchemaId,
    pub cred_def_id: CredentialDefinitionId,
    pub rev_reg_id: Option<RevocationRegistryId>,
    pub timestamp: Option<u64>
}

impl Validatable for Proof {}


#[test]
fn test_deserialize() {
    let proof =  r#"{"proof":{"proofs":[{"primary_proof":{"eq_proof":{"revealed_attrs":{"name":"1139481716457488690172217916278103335"},"a_prime":"18017896431923240505908365485075789148452168415116206328291489071230607620619028995263932900056921507032528080183268960807711894122144333310053202926605966192328263536945647116166810074344574038293730607257155382357985975688088422223520166731897840822699744762240546655662386494770620420488496975385522964510724614716862290911965443814238358554653895723431607230003718708950593308633603143490127732842456632850013987212326223160169815330300582908768800090611574776175074188808918847861865749073430719711540128976239401026267393103013986040292911362679944546062820846133778574434979875055932311508478389914735000207003","e":"83559519121287395878717669622136044815646318620514874311709459571206234463327454292630917628062700115436217341863867347698462127710406070","v":"297806490214829420686766230078875761656411019398322192340660159408525437640356447298628486670199561773289627996231003178671763674854234378582742045593152090786356168548722050923919022437294919948020197450167438513621012738971001614937494783631173417424906834450196046209089992511255664827703967570135975184640411362392658102117144696565696778260226160184205166662563339868760502203244658568114681738362874425865611483890117120551575951385574973597994708955280610971400101828731369032088887281109139124193124939540584287884165616875914678163284636131307587450221606961891189538460301724046217944798864977650080735467274438530373131735445981882185267246263755499371761873417456882351522370247911160083566690732440450139886893927311033972081322669303047930705926280689044826420220280688545215188219142706778436864160051113903892157722488901121137377923901441440141923017426694473886970495058317115339857648593543510755814225","m":{"height":"12006903624253341849897414349528320249916574584890409251234494044009772650118943979177359842712363134185042426360823508114521187446806481412797317456510257618078868574564525071674","master_secret":"6919686208640537777905634061289167918950072425929046468445054398351611354176109670910397217504584288829564076584234033108276953010251873235101744003423827510526144551331667620558","sex":"13165539014140341601812739414059384997370961293541830348392691981504671830007166315875893835129825775324685721111876571565247345930495388423719630010802561730225421962397547387507","age":"1464765639220538429462362069428301097018775282316000466628871517541386680138790057277673679234302501393691766391852725957692111731926315506123255980720728976368733501055706839955"},"m2":"13578671683654549858852643988215668906078095112870901210808381907605213325376098264588427251159007228787606553068475182937945754440107583457297550054908391037290899567766980153744"},"ge_proofs":[]},"non_revoc_proof":null}],"aggregated_proof":{"c_hash":"92451972292295535930734088937643227098723372505615593632453853864067889786715","c_list":[[1,143,68,138,222,128,151,4,206,134,41,21,121,239,118,74,230,249,16,232,65,80,218,64,216,231,211,85,196,120,71,36,165,150,25,158,3,248,76,1,127,104,97,110,107,164,97,185,127,42,250,73,52,137,139,170,152,200,177,163,50,0,128,112,156,124,215,45,69,40,200,65,65,129,107,134,218,129,232,8,222,219,218,178,196,40,89,181,94,123,198,220,5,28,193,85,7,17,26,116,159,145,239,160,41,158,27,12,144,112,27,129,34,150,100,234,235,144,173,188,60,108,75,168,141,190,59,142,4,72,35,228,121,176,195,68,52,169,92,66,108,7,214,176,200,8,147,25,192,146,253,3,159,116,102,228,136,64,182,89,164,29,154,20,47,173,76,47,255,177,109,203,173,212,210,112,254,205,131,110,170,36,214,59,175,220,116,60,24,150,88,63,12,29,22,122,58,55,94,33,31,201,8,2,98,142,50,52,164,9,215,168,55,135,15,37,42,124,42,73,184,191,96,105,242,172,243,131,14,130,2,31,59,152,154,14,2,213,112,10,191,53,209,239,145,251,163,175,192,184,160,29,191,79,214,40,100],[142,186,175,2,20,110,52,23,79,202,111,137,29,71,73,90,209,23,34,203,73,30,188,128,68,129,77,72,76,249,91,77,148,242,147,74,60,49,156,202,153,188,180,191,181,222,44,227,144,164,247,79,150,172,154,162,172,164,204,2,215,214,97,86,254,3,44,236,183,84,9,219,168,125,237,3,121,132,163,74,104,146,99,216,95,206,227,89,232,183,191,156,206,133,4,14,143,177,17,147,177,0,224,218,75,186,205,60,79,214,79,30,43,28,228,93,252,216,164,10,43,224,40,235,38,179,38,246,213,219,151,140,95,24,108,61,23,160,133,110,143,196,118,116,112,14,194,174,207,133,209,130,158,201,124,34,17,125,165,225,80,136,20,153,215,42,113,89,81,18,192,172,174,122,234,36,169,176,120,37,195,252,19,247,85,12,30,165,250,240,153,241,36,134,90,224,157,158,215,177,24,185,121,155,52,151,208,141,181,196,159,172,134,182,51,228,247,243,193,156,138,222,106,104,234,6,89,211,99,222,155,214,123,174,185,188,36,10,61,94,40,146,193,77,27,140,185,0,6,188,187,152,1,152,190,155]]}},
        "requested_proof":{
	        "revealed_attrs":{},
            "revealed_attr_groups":{
                "attr1_referent":{
                    "sub_proof_index":0,
                    "values":{
                        "name":{"raw":"Alex","encoded":"1139481716457488690172217916278103335"},
                        "age":{"raw":"29","encoded":"29"}
                    }
                }
            },
            "self_attested_attrs":{},
            "unrevealed_attrs":{},
            "predicates":{}
        },"identifiers":[{"schema_id":"NcYxiDXkpYi6ov5FcYDi1e:2:gvt:1.0","cred_def_id":"NcYxiDXkpYi6ov5FcYDi1e:3:CL:NcYxiDXkpYi6ov5FcYDi1e:2:gvt:1.0:TAG1","rev_reg_id":null,"timestamp":null},{"schema_id":"NcYxiDXkpYi6ov5FcYDi1e:2:gvt:1.0","cred_def_id":"NcYxiDXkpYi6ov5FcYDi1e:3:CL:NcYxiDXkpYi6ov5FcYDi1e:2:gvt:1.0:TAG1","rev_reg_id":null,"timestamp":null}]}
    "#;
    serde_json::from_str::<Proof>(proof).unwrap();
}