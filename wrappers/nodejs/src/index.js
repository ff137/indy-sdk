// NOTE: this file is generated by codegen/js.js

/* eslint-disable camelcase */
var capi = require('bindings')('indynodejs')
var wrapIndyCallback = require('./wrapIndyCallback')

function jsonify (val) {
  if (val === null || val === void 0) {
    return null
  }
  if (typeof val === 'string') {
    return val
  }
  return JSON.stringify(val)
}

var indy = {}

indy.issuer_create_and_store_claim_def = function issuer_create_and_store_claim_def (walletHandle, issuerDid, schema, signatureType, createNonRevoc, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.issuer_create_and_store_claim_def(walletHandle, issuerDid, jsonify(schema), signatureType, createNonRevoc, cb)
  return cb.promise
}

indy.issuer_create_and_store_revoc_reg = function issuer_create_and_store_revoc_reg (walletHandle, issuerDid, schema, maxClaimNum, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.issuer_create_and_store_revoc_reg(walletHandle, issuerDid, jsonify(schema), maxClaimNum, cb)
  return cb.promise
}

indy.issuer_create_claim_offer = function issuer_create_claim_offer (walletHandle, schema, issuerDid, proverDid, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.issuer_create_claim_offer(walletHandle, jsonify(schema), issuerDid, proverDid, cb)
  return cb.promise
}

indy.issuer_create_claim = function issuer_create_claim (walletHandle, claimReq, claim, userRevocIndex, cb) {
  cb = wrapIndyCallback(cb)
  capi.issuer_create_claim(walletHandle, jsonify(claimReq), jsonify(claim), userRevocIndex, cb)
  return cb.promise
}

indy.issuer_revoke_claim = function issuer_revoke_claim (walletHandle, issuerDid, schema, userRevocIndex, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.issuer_revoke_claim(walletHandle, issuerDid, jsonify(schema), userRevocIndex, cb)
  return cb.promise
}

indy.prover_store_claim_offer = function prover_store_claim_offer (walletHandle, claimOffer, cb) {
  cb = wrapIndyCallback(cb)
  capi.prover_store_claim_offer(walletHandle, jsonify(claimOffer), cb)
  return cb.promise
}

indy.prover_get_claim_offers = function prover_get_claim_offers (walletHandle, filter, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.prover_get_claim_offers(walletHandle, jsonify(filter), cb)
  return cb.promise
}

indy.prover_create_master_secret = function prover_create_master_secret (walletHandle, masterSecretName, cb) {
  cb = wrapIndyCallback(cb)
  capi.prover_create_master_secret(walletHandle, masterSecretName, cb)
  return cb.promise
}

indy.prover_create_and_store_claim_req = function prover_create_and_store_claim_req (walletHandle, proverDid, claimOffer, claimDef, masterSecretName, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.prover_create_and_store_claim_req(walletHandle, proverDid, jsonify(claimOffer), jsonify(claimDef), masterSecretName, cb)
  return cb.promise
}

indy.prover_store_claim = function prover_store_claim (walletHandle, claims, revReg, cb) {
  cb = wrapIndyCallback(cb)
  capi.prover_store_claim(walletHandle, jsonify(claims), jsonify(revReg), cb)
  return cb.promise
}

indy.prover_get_claims = function prover_get_claims (walletHandle, filter, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.prover_get_claims(walletHandle, jsonify(filter), cb)
  return cb.promise
}

indy.prover_get_claims_for_proof_req = function prover_get_claims_for_proof_req (walletHandle, proofRequest, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.prover_get_claims_for_proof_req(walletHandle, jsonify(proofRequest), cb)
  return cb.promise
}

indy.prover_create_proof = function prover_create_proof (walletHandle, proofReq, requestedClaims, schemas, masterSecretName, claimDefs, revocRegs, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.prover_create_proof(walletHandle, jsonify(proofReq), jsonify(requestedClaims), jsonify(schemas), masterSecretName, jsonify(claimDefs), jsonify(revocRegs), cb)
  return cb.promise
}

indy.verifier_verify_proof = function verifier_verify_proof (proofRequest, proof, schemas, claimDefsJsons, revocRegs, cb) {
  cb = wrapIndyCallback(cb)
  capi.verifier_verify_proof(jsonify(proofRequest), jsonify(proof), jsonify(schemas), jsonify(claimDefsJsons), jsonify(revocRegs), cb)
  return cb.promise
}

indy.create_key = function create_key (walletHandle, key, cb) {
  cb = wrapIndyCallback(cb)
  capi.create_key(walletHandle, jsonify(key), cb)
  return cb.promise
}

indy.set_key_metadata = function set_key_metadata (walletHandle, verkey, metadata, cb) {
  cb = wrapIndyCallback(cb)
  capi.set_key_metadata(walletHandle, verkey, metadata, cb)
  return cb.promise
}

indy.get_key_metadata = function get_key_metadata (walletHandle, verkey, cb) {
  cb = wrapIndyCallback(cb)
  capi.get_key_metadata(walletHandle, verkey, cb)
  return cb.promise
}

indy.crypto_sign = function crypto_sign (walletHandle, myVk, messageRaw, cb) {
  cb = wrapIndyCallback(cb)
  capi.crypto_sign(walletHandle, myVk, messageRaw, cb)
  return cb.promise
}

indy.crypto_verify = function crypto_verify (theirVk, messageRaw, signatureRaw, cb) {
  cb = wrapIndyCallback(cb)
  capi.crypto_verify(theirVk, messageRaw, signatureRaw, cb)
  return cb.promise
}

indy.crypto_auth_crypt = function crypto_auth_crypt (walletHandle, myVk, theirVk, messageRaw, cb) {
  cb = wrapIndyCallback(cb)
  capi.crypto_auth_crypt(walletHandle, myVk, theirVk, messageRaw, cb)
  return cb.promise
}

indy.crypto_auth_decrypt = function crypto_auth_decrypt (walletHandle, myVk, encryptedMsgRaw, cb) {
  cb = wrapIndyCallback(cb)
  capi.crypto_auth_decrypt(walletHandle, myVk, encryptedMsgRaw, cb)
  return cb.promise
}

indy.crypto_anon_crypt = function crypto_anon_crypt (theirVk, messageRaw, cb) {
  cb = wrapIndyCallback(cb)
  capi.crypto_anon_crypt(theirVk, messageRaw, cb)
  return cb.promise
}

indy.crypto_anon_decrypt = function crypto_anon_decrypt (walletHandle, myVk, encryptedMsg, cb) {
  cb = wrapIndyCallback(cb)
  capi.crypto_anon_decrypt(walletHandle, myVk, encryptedMsg, cb)
  return cb.promise
}

indy.create_and_store_my_did = function create_and_store_my_did (walletHandle, did, cb) {
  cb = wrapIndyCallback(cb)
  capi.create_and_store_my_did(walletHandle, jsonify(did), cb)
  return cb.promise
}

indy.replace_keys_start = function replace_keys_start (walletHandle, did, identity, cb) {
  cb = wrapIndyCallback(cb)
  capi.replace_keys_start(walletHandle, did, jsonify(identity), cb)
  return cb.promise
}

indy.replace_keys_apply = function replace_keys_apply (walletHandle, did, cb) {
  cb = wrapIndyCallback(cb)
  capi.replace_keys_apply(walletHandle, did, cb)
  return cb.promise
}

indy.store_their_did = function store_their_did (walletHandle, identity, cb) {
  cb = wrapIndyCallback(cb)
  capi.store_their_did(walletHandle, jsonify(identity), cb)
  return cb.promise
}

indy.key_for_did = function key_for_did (poolHandle, walletHandle, did, cb) {
  cb = wrapIndyCallback(cb)
  capi.key_for_did(poolHandle, walletHandle, did, cb)
  return cb.promise
}

indy.key_for_local_did = function key_for_local_did (walletHandle, did, cb) {
  cb = wrapIndyCallback(cb)
  capi.key_for_local_did(walletHandle, did, cb)
  return cb.promise
}

indy.set_endpoint_for_did = function set_endpoint_for_did (walletHandle, did, address, transportKey, cb) {
  cb = wrapIndyCallback(cb)
  capi.set_endpoint_for_did(walletHandle, did, address, transportKey, cb)
  return cb.promise
}

indy.get_endpoint_for_did = function get_endpoint_for_did (walletHandle, poolHandle, did, cb) {
  cb = wrapIndyCallback(cb)
  capi.get_endpoint_for_did(walletHandle, poolHandle, did, cb)
  return cb.promise
}

indy.set_did_metadata = function set_did_metadata (walletHandle, did, metadata, cb) {
  cb = wrapIndyCallback(cb)
  capi.set_did_metadata(walletHandle, did, metadata, cb)
  return cb.promise
}

indy.get_did_metadata = function get_did_metadata (walletHandle, did, cb) {
  cb = wrapIndyCallback(cb)
  capi.get_did_metadata(walletHandle, did, cb)
  return cb.promise
}

indy.get_my_did_with_meta = function get_my_did_with_meta (walletHandle, myDid, cb) {
  cb = wrapIndyCallback(cb)
  capi.get_my_did_with_meta(walletHandle, myDid, cb)
  return cb.promise
}

indy.list_my_dids_with_meta = function list_my_dids_with_meta (walletHandle, cb) {
  cb = wrapIndyCallback(cb)
  capi.list_my_dids_with_meta(walletHandle, cb)
  return cb.promise
}

indy.abbreviate_verkey = function abbreviate_verkey (did, fullVerkey, cb) {
  cb = wrapIndyCallback(cb)
  capi.abbreviate_verkey(did, fullVerkey, cb)
  return cb.promise
}

indy.sign_and_submit_request = function sign_and_submit_request (poolHandle, walletHandle, submitterDid, request, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.sign_and_submit_request(poolHandle, walletHandle, submitterDid, jsonify(request), cb)
  return cb.promise
}

indy.submit_request = function submit_request (poolHandle, request, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.submit_request(poolHandle, jsonify(request), cb)
  return cb.promise
}

indy.sign_request = function sign_request (walletHandle, submitterDid, request, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.sign_request(walletHandle, submitterDid, jsonify(request), cb)
  return cb.promise
}

indy.build_get_ddo_request = function build_get_ddo_request (submitterDid, targetDid, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.build_get_ddo_request(submitterDid, targetDid, cb)
  return cb.promise
}

indy.build_nym_request = function build_nym_request (submitterDid, targetDid, verkey, alias, role, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.build_nym_request(submitterDid, targetDid, verkey, alias, role, cb)
  return cb.promise
}

indy.build_attrib_request = function build_attrib_request (submitterDid, targetDid, hash, raw, enc, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.build_attrib_request(submitterDid, targetDid, hash, raw, enc, cb)
  return cb.promise
}

indy.build_get_attrib_request = function build_get_attrib_request (submitterDid, targetDid, hash, raw, enc, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.build_get_attrib_request(submitterDid, targetDid, hash, raw, enc, cb)
  return cb.promise
}

indy.build_get_nym_request = function build_get_nym_request (submitterDid, targetDid, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.build_get_nym_request(submitterDid, targetDid, cb)
  return cb.promise
}

indy.build_schema_request = function build_schema_request (submitterDid, data, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.build_schema_request(submitterDid, data, cb)
  return cb.promise
}

indy.build_get_schema_request = function build_get_schema_request (submitterDid, dest, data, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.build_get_schema_request(submitterDid, dest, data, cb)
  return cb.promise
}

indy.build_claim_def_txn = function build_claim_def_txn (submitterDid, xref, signatureType, data, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.build_claim_def_txn(submitterDid, xref, signatureType, data, cb)
  return cb.promise
}

indy.build_get_claim_def_txn = function build_get_claim_def_txn (submitterDid, xref, signatureType, origin, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.build_get_claim_def_txn(submitterDid, xref, signatureType, origin, cb)
  return cb.promise
}

indy.build_node_request = function build_node_request (submitterDid, targetDid, data, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.build_node_request(submitterDid, targetDid, data, cb)
  return cb.promise
}

indy.build_get_txn_request = function build_get_txn_request (submitterDid, data, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.build_get_txn_request(submitterDid, data, cb)
  return cb.promise
}

indy.build_pool_config_request = function build_pool_config_request (submitterDid, writes, force, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.build_pool_config_request(submitterDid, writes, force, cb)
  return cb.promise
}

indy.build_pool_upgrade_request = function build_pool_upgrade_request (submitterDid, name, version, action, sha256, timeout, schedule, justification, reinstall, force, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.build_pool_upgrade_request(submitterDid, name, version, action, sha256, timeout, schedule, justification, reinstall, force, cb)
  return cb.promise
}

indy.is_pairwise_exists = function is_pairwise_exists (walletHandle, theirDid, cb) {
  cb = wrapIndyCallback(cb)
  capi.is_pairwise_exists(walletHandle, theirDid, cb)
  return cb.promise
}

indy.create_pairwise = function create_pairwise (walletHandle, theirDid, myDid, metadata, cb) {
  cb = wrapIndyCallback(cb)
  capi.create_pairwise(walletHandle, theirDid, myDid, metadata, cb)
  return cb.promise
}

indy.list_pairwise = function list_pairwise (walletHandle, cb) {
  cb = wrapIndyCallback(cb)
  capi.list_pairwise(walletHandle, cb)
  return cb.promise
}

indy.get_pairwise = function get_pairwise (walletHandle, theirDid, cb) {
  cb = wrapIndyCallback(cb, true)
  capi.get_pairwise(walletHandle, theirDid, cb)
  return cb.promise
}

indy.set_pairwise_metadata = function set_pairwise_metadata (walletHandle, theirDid, metadata, cb) {
  cb = wrapIndyCallback(cb)
  capi.set_pairwise_metadata(walletHandle, theirDid, metadata, cb)
  return cb.promise
}

indy.create_pool_ledger_config = function create_pool_ledger_config (configName, config, cb) {
  cb = wrapIndyCallback(cb)
  capi.create_pool_ledger_config(configName, jsonify(config), cb)
  return cb.promise
}

indy.open_pool_ledger = function open_pool_ledger (configName, config, cb) {
  cb = wrapIndyCallback(cb)
  capi.open_pool_ledger(configName, config, cb)
  return cb.promise
}

indy.refresh_pool_ledger = function refresh_pool_ledger (handle, cb) {
  cb = wrapIndyCallback(cb)
  capi.refresh_pool_ledger(handle, cb)
  return cb.promise
}

indy.list_pools = function list_pools (cb) {
  cb = wrapIndyCallback(cb, true)
  capi.list_pools(cb)
  return cb.promise
}

indy.close_pool_ledger = function close_pool_ledger (handle, cb) {
  cb = wrapIndyCallback(cb)
  capi.close_pool_ledger(handle, cb)
  return cb.promise
}

indy.delete_pool_ledger_config = function delete_pool_ledger_config (configName, cb) {
  cb = wrapIndyCallback(cb)
  capi.delete_pool_ledger_config(configName, cb)
  return cb.promise
}

indy.create_wallet = function create_wallet (poolName, name, xtype, config, credentials, cb) {
  cb = wrapIndyCallback(cb)
  capi.create_wallet(poolName, name, xtype, config, credentials, cb)
  return cb.promise
}

indy.open_wallet = function open_wallet (name, runtimeConfig, credentials, cb) {
  cb = wrapIndyCallback(cb)
  capi.open_wallet(name, runtimeConfig, credentials, cb)
  return cb.promise
}

indy.list_wallets = function list_wallets (cb) {
  cb = wrapIndyCallback(cb, true)
  capi.list_wallets(cb)
  return cb.promise
}

indy.close_wallet = function close_wallet (handle, cb) {
  cb = wrapIndyCallback(cb)
  capi.close_wallet(handle, cb)
  return cb.promise
}

indy.delete_wallet = function delete_wallet (name, credentials, cb) {
  cb = wrapIndyCallback(cb)
  capi.delete_wallet(name, credentials, cb)
  return cb.promise
}

module.exports = indy
